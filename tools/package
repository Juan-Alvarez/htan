#!/bin/bash

#======================================================================
# Represents methods to work with packages.
#
# USAGE:
#   package [--debug] [--version] [--help] [--nocolor]
#
#           [
#             --install="Package name"
#             [--title="Package title"]
#             [--confirm=true|false]
#             [--pack-version="Version number"]
#           ]
#
#           [--exists="Package name"]
#
#           [--get-version="Package name" [--major]]
#
#           [--update] [--upgrade]
#
# NAME:
#   HTAN Package Tool
#
# PROJECT:
#   Hosting tools by Aleksey Nemiro (HTAN)
#
# REQUIREMENTS:
#   Debian 8, sudo, HTAN Tools
#
# AUTHOR:
#   Aleksey Nemiro
#   http://aleksey.nemiro.ru/
#   https://github.com/alekseynemiro/
#   <aleksey@nemiro.ru>
#   <aleksey.nemiro@gmail.com>
#
# VERSION:
#   1.0.0
#
# CREATED:
#   21.09.2015
#
# REVISION:
#   25.12.2015
#
# COPYRIGHT:
#   © Aleksey Nemiro, 2015. All rights reserved.
#
# LICENSE:
#   Apache License Version 2.0
#   http://www.apache.org/licenses/LICENSE-2.0
#======================================================================

# Including common
if [[ -z "$HTAN_INCLUDED_TOOLS" ]]; then
  {
    if [[ "${0##*/}" != "package" ]]; then
      printf "$(gettext "Including the common …")"
    fi
    if source "$(cd $(dirname $0) && pwd)/common"; then
      if [[ "${0##*/}" != "package" ]]; then
        OK
      fi
    fi
  } || {
    echo ""
    echo -e "\033[1;31m$(gettext "Failed to include the common.")\033[0m"
    exit 1
  }
fi

HTAN_INCLUDED_TOOLS=("${HTAN_INCLUDED_TOOLS[@]}" "package")

#======================================================================
# Installs the specified package.
#
# USAGE:
#   PackageInstall -name="Package name"
#                  [-title="Package title"]
#                  [-confirm] [-root]
#                  [-version="Package version"]
#
# ARGUMENTS:
#   -name
#     The name of package.
#
#   -title
#     Package title. For human.
#     Default: -name.
#
#   -confirm
#     Required installation confirmation or not.
#     Default: true.
#
#   -root
#     Install with root privileges.
#     Default: false.
#
#   -version
#     Package version.
#
# RETURNS:
#   Returns 0 (true) if successful; otherwise 1 (false).
#======================================================================
PackageInstall()
{
  # parse and set parameters to variables
  ParseArgs "$@"
  local pack_inst_name="${HTAN_PARSE_ARGS_RESULT[name]:-${HTAN_PARSE_ARGS_RESULT_DEF}}"
  local pack_inst_title="${HTAN_PARSE_ARGS_RESULT[title]:-$pack_inst_name}"
  local pack_inst_confirm="${HTAN_PARSE_ARGS_RESULT[confirm]:-true}"
  local pack_inst_root="${HTAN_PARSE_ARGS_RESULT[root]:-false}"
  local pack_inst_version="${HTAN_PARSE_ARGS_RESULT[version]}"

  if [[ "$pack_inst_version" == true ]]; then
    pack_inst_version=""
  fi

  Debug "PackageInstall name=$pack_inst_name title=$pack_inst_title confirm=$pack_inst_confirm root=$pack_inst_root"

  if [[ -z "$pack_inst_name" ]]; then
    # Ошибка: Необходимо указать название пакета в первом параметре!
    # You must specify the name of the package in the first parameter!
    Error "$(gettext "You must specify the name of the package in the first parameter!")"
  fi

  # проверяем, может такой пакет уже установлен
  if PackageExists "$pack_inst_name"; then
    # Установка %s не требуется.
    # Installing %s is not required
    Message "$(gettext "Installing %s is not required")" "$pack_inst_title" -s="$DEF_STYLE_PACKAGE_COMP" -n
    OK
    return 0 # true
  else
    # по умолчанию требуется установка
    local need_install=true

    # если при вызове функции не указан второй параметр,
    # или указан и имеет значение true, спрашиваем разрешение
    if [[ "$pack_inst_confirm" == true ]]; then
      #if [[ ! -z "$4" ]]; then
      #  Message "$4"
      #fi

      # Хотите установить $pack_inst_title?
      # Do you want to install %s?
      if ! Confirm "$(gettext "Do you want to install %s?")" "$pack_inst_title" -yes; then
        need_install=false
      fi

      Line
    fi

    # устанавливаем пакет, если разрешено
    if $need_install; then
      # add version number
      if [[ -n "$pack_inst_version" ]]; then
        pack_inst_name="$pack_inst_name=$pack_inst_version"
      fi
      # create command
      local c="export DEBIAN_FRONTEND=noninteractive; sudo -E apt-get -q -y install $pack_inst_name >> $HTAN_LOG 2>&1"
      if [[ "$pack_inst_root" == true ]]; then
        c="export DEBIAN_FRONTEND=noninteractive; su root -c 'apt-get -q -y install $pack_inst_name >> $HTAN_LOG 2>&1' >> $HTAN_LOG 2>&1"
      fi
      # execute command
      Execute -c="$c" -m="$(gettext "Installing %s …")" -a="$pack_inst_title" -sp="$DEF_STYLE_PACKAGE_PROC" -sc="$DEF_STYLE_PACKAGE_COMP"
      # check result
      if [[ $? != 0 ]]; then
        # Не удалось установить %s. Попробуйте выполнить операцию вручную.
        Message "$(gettext "Can not install %s. Please try to install manually.")" "$pack_inst_title" -s="$DEF_STYLE_ERROR"
        # Для получения подробностей, ознакомьтесь с файлом журнала %s.
        Message "$(gettext "For details, see the log file: %s.")" "$HTAN_LOG" -s="$DEF_STYLE_ERROR"
        # Последние записи из журнала:
        Message "$(gettext "Last log records:")" -s="$DEF_STYLE_ERROR"
        ShowLastLogRecords -s="$DEF_STYLE_ERROR"
        return 1
      else
        if [[ "$pack_inst_version" != "" ]]; then
          HTAN_INSTALLED+=("$pack_inst_title v$pack_inst_version")
        else
          HTAN_INSTALLED+=("$pack_inst_title v$(PackageVersion "$pack_inst_name")")
        fi
        return 0
      fi
    else
      # Установка %s …
      # Installing %s …
      Message "$(gettext "Installing %s …")" "$pack_inst_name" -s="$DEF_STYLE_PACKAGE" -n
      Cancelled
      return 1
    fi
  fi
}

#======================================================================
# Checks the specified package is installed or not.
#
# USAGE:
#   PackageExists "Package name"
#
# ARGUMENTS:
#   $1
#     The name of package.
#
# RETURNS:
#   Returns 0 (true) if the package is installed; otherwise 1 (false).
#======================================================================
PackageExists()
{
  if [[ -z "$1" ]]; then
    Error "$(gettext "You must specify the name of the package in the first parameter!")"
  fi

  # 2> - error messages
  # /dev/null - black hole
  return $(dpkg-query -s "$1" 2> /dev/null | grep -q "ok installed")

  #{
  #  dpkg-query -s "$1" 2> /dev/null | grep -q "ok installed" && 
  #  Message "%s is installed." "$1" -s="$DEF_STYLE_PACKAGE"
  #  return 0
  #} || {
  #  Message "%s not installed." "$1" -s="$DEF_STYLE_PACKAGE"
  #  return 1
  #}
}

#======================================================================
# Gets from cache the version number of the specified package.
#
# USAGE:
#   PackageVersion "Package name" [true|false]
#
# ARGUMENTS:
#   $1
#     The name of package.
#
#   $2
#     Get only major number (true). Default: false.
#
# RETURNS:
#   Returns 0 (true) if the package is installed; otherwise 1 (false).
#======================================================================
PackageVersion()
{
  local pv_name="$1" pv_major="$2"
  if [[ -z "$pv_name" ]]; then
    Error "$(gettext "You must specify the name of the package in the first parameter!")"
  fi

  local version=$(apt-cache show "$pv_name" | grep Version: | head -1 | sed -r "s/Version\:\s*(([0-9]+\:|)[0-9\.]+).*/\1/")

  if [[ "$pv_major" == true ]]; then
    echo "${version%%[^0-9]*}"
  else
    echo "$version"
  fi

  return 0
}

#======================================================================
# Updates the package index.
#
# USAGE:
#   PackageUpdate
#
# ARGUMENTS:
#   None
#
# RETURNS:
#   None
#======================================================================
PackageUpdate()
{
  local c="sudo apt-get update >> $HTAN_LOG 2>&1"
  if ! PackageExists sudo; then
    c="su root -c 'apt-get update' >> $HTAN_LOG 2>&1"
  fi
  # Обновление информации о пакетах …
  Execute -c="$c" -m="$(gettext "Updating the package cache …")" -sp="$DEF_STYLE_PACKAGE_PROC" -sc="$DEF_STYLE_PACKAGE_COMP"
}

#======================================================================
# Updates packages.
#
# USAGE:
#   PackageUpgradeAll
#
# ARGUMENTS:
#   None
#
# RETURNS:
#   None
#======================================================================
PackageUpgradeAll()
{
  local c="sudo apt-get -y upgrade >> $HTAN_LOG 2>&1"
  if ! PackageExists sudo; then
    c="su root -c 'apt-get -y upgrade' >> $HTAN_LOG 2>&1"
  fi
  # Обновление пакетов …
  Execute -c="$c" -m="$(gettext "Updating packages …")" -sp="$DEF_STYLE_PACKAGE_PROC" -sc="$DEF_STYLE_PACKAGE_COMP"
}

#----------------------------------------------------------------------
# Self-script
#----------------------------------------------------------------------
if [[ "${0##*/}" == "package" ]]; then
  ParseArgs "$@"

  if [[ -n "${HTAN_PARSE_ARGS_RESULT[install]}" ]]; then
    HTAN_ONE_SKIP_PARSE_ARGS=true
    if [[ -n "${HTAN_PARSE_ARGS_RESULT[pack-version]}" ]]; then
      HTAN_PARSE_ARGS_RESULT[version]="${HTAN_PARSE_ARGS_RESULT[pack-version]}"
      unset HTAN_PARSE_ARGS_RESULT[pack-version]
    fi
    HTAN_PARSE_ARGS_RESULT[name]="${HTAN_PARSE_ARGS_RESULT[install]}"
    unset HTAN_PARSE_ARGS_RESULT[install]
    PackageInstall
  elif [[ -n "${HTAN_PARSE_ARGS_RESULT[exists]}" ]]; then
    HTAN_ONE_SKIP_PARSE_ARGS=true
    PackageExists "${HTAN_PARSE_ARGS_RESULT[exists]}"
  elif [[ -n "${HTAN_PARSE_ARGS_RESULT[get-version]}" ]]; then
    HTAN_ONE_SKIP_PARSE_ARGS=false
    PackageVersion "${HTAN_PARSE_ARGS_RESULT[get-version]}" "${HTAN_PARSE_ARGS_RESULT[major]}"
  elif [[ -n "${HTAN_PARSE_ARGS_RESULT[update]}" ]]; then
    HTAN_ONE_SKIP_PARSE_ARGS=false
    PackageUpdate
  elif [[ -n "${HTAN_PARSE_ARGS_RESULT[upgrade]}" ]]; then
    HTAN_ONE_SKIP_PARSE_ARGS=false
    PackageUpgradeAll
  fi

  exit $?
fi