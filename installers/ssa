#!/bin/bash

#======================================================================
# Performs installation and configuration of SmallServerAdmin.
#
# USAGE:
#   ssa [--debug] [--version] [--help] [--nocolor] [--tested]
#
# PROJECT:
#   Hosting tools by Aleksey Nemiro (HTAN)
#
# REQUIREMENTS:
#   Debian 8, sudo, HTAN Tools
#
# AUTHOR:
#   Aleksey Nemiro
#   http://aleksey.nemiro.ru/
#   https://github.com/alekseynemiro/
#   <aleksey@nemiro.ru>
#   <aleksey.nemiro@gmail.com>
#
# VERSION:
#   1.0.2
#
# CREATED:
#   11.04.2016
#
# REVISION:
#   26.04.2016
#
# COPYRIGHT:
#   © Aleksey Nemiro, 2016. All rights reserved.
#
# LICENSE:
#   Apache License Version 2.0
#   http://www.apache.org/licenses/LICENSE-2.0
#
# HTAN_NAME:
#   SmallServerAdmin
#
# HTAN_CATEGORY:
#   Admin Panel
#
# HTAN_OPTIONAL:
#   true
#======================================================================

# Including common
if [[ -z "$HTAN_INCLUDED_TOOLS" ]]; then
  {
    if [[ "${0##*/}" != "ssa" ]]; then
      printf "Including the common …"
    fi
    if source "$(cd $(dirname $0) && pwd)/../tools/common"; then
      if [[ "${0##*/}" != "ssa" ]]; then
        OK
      fi
    fi
  } || {
    echo ""
    echo -e "\033[1;31m$(gettext "Failed to include the common.")\033[0m"
    exit 1
  }
fi

# Including tools
IncludeTool package service config web

InstallSSA()
{
  local base_path="/usr/share/ssa-webpanel" # without slash at end
  local www_path="$base_path/www"
  local htpasswd_path="$base_path/.htpasswd"

  Line =
  Message "$(gettext "# Installing and configuring %s.")" "SmallServerAdmin" -s="$DEF_STYLE_HEADER"
  Line =

  # Для управления сервером можно установить бесплатную веб-панель SmallServerAdmin.
  Message "$(gettext "To manage the server, you can install the free web panel SmallServerAdmin.")"
  Line

  if [[ -f "$www_path/config.php" ]]; then
    # Вероятно, панель SmallServerAdmin уже установлена.
    Message "$(gettext "Probably, SmallServerAdmin already installed.")"
    if ! Confirm "$(gettext "Would you like to configure?")" -yes; then
      Message "$(gettext "Operation canceled by the user.")"
      return
    fi
  else
    # Установить панель управления сервером?
    if ! Confirm "$(gettext "Do you want to install the server control panel?")" -yes; then
      Message "$(gettext "Operation canceled by the user.")"
      return
    fi
  fi

  Line

  # installation of dependents
  PackageInstall "openssh-server" -confirm=false
  Line

  PackageInstall "git" -confirm=false
  Line

  PackageInstall "subversion" -confirm=false
  Line

  if ! PackageInstall php7 && ! PackageInstall php7.0; then
    PackageInstall "php5" -confirm=false
    Line
  fi

  if ! PackageInstall php7-fpm && ! PackageInstall php7.0-fpm; then
    PackageInstall "php5-fpm" -confirm=false
    Line
  fi

  PackageInstall "libssh2-php" -confirm=false
  Line

  PackageInstall "sysstat" -confirm=false
  Line

  PackageInstall "pev" -confirm=false
  Line

  # htan-runner for ASP.NET
  if PackageExists mono-devel; then
    if [[ ! -f "$HTAN_PATH_INSTALLERS/htan-runner" ]]; then
      Message "$(gettext "%s not found.")" "htan-runner"
      Message "$(gettext "Recommended to install %s.")" "htan-runner"
      Message "$(gettext "Check for updates %s.")" "HTAN Installer"
      Line
    else
      sudo chmod u=rx,g=rx "$HTAN_PATH_INSTALLERS/htan-runner"
      sudo "$HTAN_PATH_INSTALLERS/htan-runner" --confirm --lang="$HTAN_LANG"
      Line
    fi
  fi

  # etckeeper
  if ! PackageExists etckeeper; then
    if [[ -f "$HTAN_PATH_INSTALLERS/etckeeper" ]]; then
      sudo chmod u=rx,g=rx "$HTAN_PATH_INSTALLERS/etckeeper"
      sudo "$HTAN_PATH_INSTALLERS/etckeeper" --confirm --lang="$HTAN_LANG"
      Line
    fi
  fi

  # remove old folder
  if [[ -d "$www_path" ]]; then
    Execute -c="rm --recursive --force $www_path >> $HTAN_LOG 2>&1" -m="$(gettext "Removing %s …")" -a="$www_path" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
    Line
  fi

  # download SmallServerAdmin
  local command="svn export https://github.com/adminstock/ssa.git/trunk/SmallServerAdmin $www_path >> $HTAN_LOG 2>&1"
  Execute -c="$command" -m="$(gettext "Downloading %s …")" -a="SmallServerAdmin" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP" || return 1
  Line

  # host
  EnterHost "$(printf "$(gettext "Enter the domain for %s:")" "SmallServerAdmin")" -default="panel.$HOSTNAME"
  Line

  local ssa_host="$HTAN_ENTERED_HOST"

  AddHost "$ssa_host"
  Line

  # create sudo user for SmallServerAdmin
  local ssa_ssh_has_user=false
  local ssa_ssh_user="ssa"
  local ssa_ssh_password="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 12)"

  # # Панель будет работать с сервером по SSH.\nВсе команды будут выполняться через sudo.
  # Message "$(gettext "The panel will work with the server via SSH.\nAll commands will be executed through sudo.")"
  # Line

  # while true; do
  #
  #   Message "$(gettext "Enter a username to create:")" -s="$DEF_STYLE_ENTER"
  #   Read -e -i "$ssa_ssh_user" ssa_ssh_user
  #
  #   if [[ -n "$ssa_ssh_user" ]]; then
  #     if id -u "$ssa_ssh_user" >/dev/null 2>&1; then
  #       Line
  #       Message "$(gettext "User %s already exists.")" "$ssa_ssh_user"
  #       Message "$(gettext "For safety reasons, it is recommended to create a new user for the panel.")"
  #       ssa_ssh_user="ssa$(shuf -i 1-65535 -n 1)"
  #       Line
  #       # if ! Confirm "$(gettext "Do you still want to use the user %s?")" "$ssa_ssh_user" -no; then
  #       continue
  #       # fi
  #     else
  #       # create user
  #       local c="sudo adduser $ssa_ssh_user --quiet --shell /bin/bash --no-create-home --disabled-password --gecos 'SmallServerAdmin,$(GetServerIP),,support@adminlikes.com' >> $HTAN_LOG 2>&1"
  #
  #       Line
  #       Execute -c="$c" -m="$(gettext "Creating %s …")" -a="SmallServerAdmin" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
  #       Line
  #
  #       if [[ $? = 0 ]]; then
  #         ssa_ssh_has_user=true
  #         # set password
  #         while true; do
  #           if EnterPassword; then
  #             Line
  #
  #             ssa_ssh_password="$HTAN_PASSWORD"
  #             c="sudo bash -c 'echo -e \"$ssa_ssh_password\n$ssa_ssh_password\" | passwd \"$ssa_ssh_user\"' >> $HTAN_LOG 2>&1"
  #             Execute "$c" -m="Setting the password for %s …" -a="$ssa_ssh_user" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
  #
  #             if [[ $? = 0 ]]; then
  #               Line
  #               break
  #             else
  #               Line
  #               if ! Confirm "$(gettext "Do you want to try again?")"; then
  #                 ssa_ssh_has_user=false
  #                 break
  #               fi
  #             fi
  #           fi
  #         done
  #       fi
  #     fi
  #
  #     # add user to sudo
  #     if [[ "$ssa_ssh_has_user" == true ]]; then
  #       if ! groups "$ssa_ssh_user" 2> /dev/null | grep -q "\bsudo\b"; then
  #         c="sudo usermod -a -G sudo $ssa_ssh_user"
  #         Execute "$c" -m="$(gettext "Adding %s to the %s …")" -a="$ssa_ssh_user" -a="sudo" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
  #       else
  #         Message "$(gettext "The user %s is a member of %s.")" "$ssa_ssh_user" "sudo"
  #       fi
  #
  #       break
  #     fi
  #   else
  #     Message "$(gettext "Error: Username is required. Value cannot be empty.")" -s="$DEF_STYLE_ERROR"
  #   fi
  #
  #   # todo: exit if many attempts
  # done

  # generate ssa user
  while true; do

    if id -u "$ssa_ssh_user" >/dev/null 2>&1; then
      # generate new user name
      ssa_ssh_user="ssa$(shuf -i 1-65535 -n 1)"
      continue
    fi

    # create user
    local c="sudo adduser $ssa_ssh_user --quiet --shell /bin/bash --no-create-home --disabled-password --gecos 'SmallServerAdmin,$(GetServerIP),,support@adminlikes.com' >> $HTAN_LOG 2>&1"

    Execute -c="$c" -m="$(gettext "Creating %s …")" -a="$ssa_ssh_user" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"

    if [[ $? = 0 ]]; then
      # set password
      Line
      c="sudo bash -c 'echo -e \"$ssa_ssh_password\n$ssa_ssh_password\" | passwd \"$ssa_ssh_user\"' >> $HTAN_LOG 2>&1"
      Execute "$c" -m="$(gettext "Setting the password for %s …")" -a="$ssa_ssh_user" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
      Line
    else
      # error
      Line
      if id -u "$ssa_ssh_user" >/dev/null 2>&1; then
        # remove created user
        c="sudo userdel $ssa_ssh_user --remove"
        Execute "$c" -m="$(gettext "Removing %s …")" -a="$ssa_ssh_user" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
        Line
      fi
      continue
    fi

    # add user to sudo
    if ! groups "$ssa_ssh_user" 2> /dev/null | grep -q "\bsudo\b"; then
      c="sudo usermod -a -G sudo $ssa_ssh_user"
      Execute "$c" -m="$(gettext "Adding %s to the %s …")" -a="$ssa_ssh_user" -a="sudo" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
    else
      Message "$(gettext "The user %s is a member of %s.")" "$ssa_ssh_user" "sudo"
    fi

    break

  done

  Line

  # config SmallServerAdmin
  local ssa_config_source="$HTAN_PATH_DATA/ssa.config.php"
  local ssa_config_target="$www_path/ssa.config.php"
  if [[ -f $ssa_config_source ]]; then
    local c="sudo cp $ssa_config_source $ssa_config_target >> $HTAN_LOG 2>&1"
    Execute -c="$c" -m="$(gettext "Creating configuration file for %s …")" -a="SmallServerAdmin" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"
    # config
    local ssa_modules="users" ssa_dbadmin_list=""

    if PackageExists subversion; then
      ssa_modules+=",svn"
    fi

    if PackageExists phpmyadmin || PackageExists phppgadmin; then
      ssa_modules+=",dbadmin"
    fi

    if PackageExists phpmyadmin; then
      ssa_dbadmin_list+="['file_name' => 'mysql.php', 'title' => 'MySql']"
    fi

    if PackageExists phppgadmin; then
      if [[ -n "$ssa_dbadmin_list" ]]; then
        ssa_dbadmin_list+=", "
      fi
      ssa_dbadmin_list+="['file_name' => 'pgsql.php', 'title' => 'PostgreSql']"
    fi

    ssa_modules+=",sites,files,monitoring,services,ssh"

    local ssa_wsearchstring="nginx,apache"
    local ssa_web_htan_enabled="FALSE"

    if [[ -f "/usr/lib/htan-runner/HTAN.Runner.exe" ]]; then
      ssa_wsearchstring+=",htan-runner"
      ssa_web_htan_enabled="TRUE"
    fi

    if PackageExists php5-fpm; then
      ssa_wsearchstring+=",php5-fpm"
    fi

    if PackageExists php7-fpm; then
      ssa_wsearchstring+=",php7-fpm"
    fi

    ReplaceMarker $ssa_config_target "HTAN_Version" "$HTAN_VERSION"
    ReplaceMarker $ssa_config_target "modules" "$ssa_modules"
    ReplaceMarker $ssa_config_target "WServices_SearchString" "$ssa_wsearchstring"
    ReplaceMarker $ssa_config_target "ApacheHost" "127.0.0.1"
    ReplaceMarker $ssa_config_target "ApachePort" "8080"
    ReplaceMarker $ssa_config_target "PhpFastCgiPort" "9001"
    ReplaceMarker $ssa_config_target "AspNetFastCgiPort" "9100"

    local ssh_port="$(GetValue /etc/ssh/sshd_config Port)"

    if [[ -z "$ssh_port" ]]; then
      ssh_port=22
    fi

    ReplaceMarker $ssa_config_target "ssh_host" "$(GetServerIP)"
    ReplaceMarker $ssa_config_target "ssh_port" "$ssh_port"
    ReplaceMarker $ssa_config_target "ssh_user" "$ssa_ssh_user"
    ReplaceMarker $ssa_config_target "ssh_password" "$ssa_ssh_password"
    ReplaceMarker $ssa_config_target "ssh_required_password" "TRUE"

    ReplaceMarker $ssa_config_target "dbadmin_list" "$ssa_dbadmin_list"

    ReplaceMarker $ssa_config_target "web_htan_enabled" "$ssa_web_htan_enabled"

  else
    Message "$(gettext "Unable to configure %s. The file %s was not found.")" -a="SmallServerAdmin" -a="$ssa_config_source" -s="$DEF_STYLE_ERROR"
    Line
  fi

  # add user to ssh
  local ssh_allow_users="$(GetValue /etc/ssh/sshd_config AllowUsers)"
  if [[ "$ssh_allow_users" != *"$ssa_ssh_user"* ]]; then
    if [[ "$ssh_allow_users" != "" ]]; then
      ssh_allow_users+=" "
    fi
    ssh_allow_users+="$ssa_ssh_user"
    SetValue "/etc/ssh/sshd_config" "AllowUsers" "$ssh_allow_users"
    # reload ssh
    ServiceReload sshd
    Line
  fi

  # access
  local ssa_panel_access=" "

  Message "$(gettext "To increase security it is recommended to restrict access to the panel by IP.")"
  Line

  if Confirm "$(gettext "Do you want to restrict access by IP?")" -yes; then
    local current_client_ip="$(echo "$SSH_CLIENT" | awk '{ print $1}')"
    local address_to_add="" ssa_panel_acs_adr_yesno="-yes"

    while true; do

      Message "$(gettext "Enter a network or address for allow access:")" -s="$DEF_STYLE_ENTER"
      Read -e -i "$current_client_ip" address_to_add
      Line

      if [[ -n "$address_to_add" ]]; then
        # add address to allow list
        if [[ "$ssa_panel_access" == " " ]]; then
          ssa_panel_access=$'\x01\x01'
        else
          ssa_panel_access+=$'\x01'
        fi
        ssa_panel_access+="  allow $address_to_add;"
        ssa_panel_acs_adr_yesno="-yes"
        current_client_ip=""
      else
        ssa_panel_acs_adr_yesno="-no"
      fi

      if ! Confirm "$(gettext "Do you want to add another address?")" $ssa_panel_acs_adr_yesno; then
        break
      fi

      Line

    done

    # rules not empty
    if [[ "$ssa_panel_access" != " " ]]; then
      # deny all
      ssa_panel_access+=$'\x01'
      ssa_panel_access+="  deny all;"
    fi

    Line
  fi

  if [[ "$ssa_panel_access" == " " ]]; then
    ssa_panel_access=$'\x01\x01'
    ssa_panel_access+="  # allow 192.168.100.1;"
    ssa_panel_access+=$'\x01'
    ssa_panel_access+="  # allow 192.168.1.0/24;"
    ssa_panel_access+=$'\x01'
    ssa_panel_access+="  # deny all;"
    ssa_panel_access+=$'\x01'
    ssa_panel_access+="  # etc"
    ssa_panel_access+=$'\x01'
    ssa_panel_access+="  # for details, visit"
    ssa_panel_access+=$'\x01'
    ssa_panel_access+="  # http://nginx.org/en/docs/http/ngx_http_access_module.html"
  fi

  # add to nginx
  local phpmyadmin_conf=" " phppgadmin_conf=" "

  if PackageExists phpmyadmin; then
    phpmyadmin_conf=$'\x01\x01'
    phpmyadmin_conf+="$(cat $HTAN_PATH_DATA/nginx/ssa-phpmyadmin.conf | sed -r ':a;N;$!ba;s/\n{1}/\x01/g')"
  fi

  if PackageExists phppgadmin; then
    phppgadmin_conf=$'\x01\x01'
    phppgadmin_conf+="$(cat $HTAN_PATH_DATA/nginx/ssa-phppgadmin.conf | sed -r ':a;N;$!ba;s/\n{1}/\x01/g')"
  fi

  AddSiteToNginx -host="$ssa_host" -source="ssa.conf" -root="$www_path" -htpasswd="$htpasswd_path" -mysqladmin="$phpmyadmin_conf" -postgresadmin="$phppgadmin_conf" -access="$ssa_panel_access" -newline=$'\x01'
  Line

  # add web users
  local ssa_username ssa_password
  local has_users=false add_other_user="-yes"
  local si_users=""

  while true; do

    # Хотите добавить разрешение на доступ к панели?
    if ! Confirm "$(gettext "Do you want to add the permission to access the panel?")" $add_other_user; then
      if [[ $has_users = false ]]; then
        Line
        # Доступ к панели будет невозможен без ввода логина и пароля.\nЧтобы предоставить разрешение на доступ к панели, выполните следующую команду:\nsudo htpasswd -dcb %s usersname password\n, где usersname - имя пользователя, password - пароль.
        Message "$(gettext "Access to the panel is not possible without login and password?\nTo grant permission to access the panel, run the following command:\nsudo htpasswd -dcb %s usersnameToAccess userPassword")" "$htpasswd_path" -s="$DEF_STYLE_WARNING"
      fi
      break
    fi

    Line

    Message "$(gettext "Enter a username:")" -s="$DEF_STYLE_ENTER"

    Read -e -i "$ssa_username" ssa_username

    Line

    if [[ -n "$ssa_username" ]]; then
      if EnterPassword; then
        local ssa_password="$HTAN_PASSWORD"
        local htpasswd_args="-db"
        
        if [[ ! -f "$htpasswd_path" ]]; then
          htpasswd_args="-dcb"
        fi

        Line

        Execute "sudo htpasswd $htpasswd_args $htpasswd_path $ssa_username $ssa_password >> $HTAN_LOG 2>&1" -m="$(gettext "Adding permissions for %s …")" -a="$ssa_username" -sp="$DEF_STYLE_ACTION_PROC" -sc="$DEF_STYLE_ACTION_COMP"

        if [[ $? = 0 ]]; then
          has_users=true
          add_other_user="-no"
          # server info
          if [[ -n "$si_users" ]]; then
            si_users+="\n"
          fi
          si_users+="$(gettext "Login"): $ssa_username\n"
          si_users+="$(gettext "Password"): $ssa_password\n"
          ssa_username=""
        fi
      else
        Message "$(gettext "Error: User %s not found.")" "$ssa_username" -s="$DEF_STYLE_ERROR"
      fi

      Line
    else
      Message "$(gettext "Error: Username is required. Value cannot be empty.")" -s="$DEF_STYLE_ERROR"
    fi

  done

  Line

  # server info
  ServerInfo "SmallServerAdmin:\n"
  ServerInfo "--------------------------------------------\n"
  ServerInfo "$(gettext "Address"): http://$ssa_host\n"
  ServerInfo "$si_users"
  ServerInfo "--------------------------------------------\n\n"
  
  if [[ -f "$www_path/.version" ]]; then
    HTAN_INSTALLED+=("SmallServerAdmin v$(cat $www_path/.version)")
  else
    HTAN_INSTALLED+=("SmallServerAdmin unknown version")
  fi

  Message "$(gettext "Done.")"
}

InstallSSA